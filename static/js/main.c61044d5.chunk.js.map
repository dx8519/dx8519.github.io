{"version":3,"sources":["Home.js","About.js","App.js","serviceWorker.js","index.js","portrait.jpg","CV.pdf"],"names":["useStyles","makeStyles","body","textAlign","portrait","borderRadius","Home","classes","className","classnames","src","alt","height","width","Typography","variant","IconButton","href","About","theme","createMuiTheme","palette","type","primary","main","typography","fontFamily","fontSize","App","matchesMd","useMediaQuery","breakpoints","up","appBar","boxShadow","homeLink","color","minHeight","backgroundColor","title","fontWeight","letterSpacing","paddingLeft","toolBar","minWidth","maxWidth","margin","ThemeProvider","AppBar","position","Toolbar","Grid","container","justify","alignItems","item","to","Button","CV","target","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6SAYMA,EAAYC,IAAW,CAC3BC,KAAM,CACJC,UAAW,UAIbC,SAAU,CACRC,aAAa,SAQF,SAASC,IACtB,IAAMC,EAAQP,IACd,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAWC,IAAW,gBAAiB,WAAYF,EAAQL,OAC9D,yBAAKQ,IAAKN,IAAUO,IAAI,WAAWC,OAtBrB,MAsB4CC,MAtB5C,MAsBkEL,UAAWD,EAAQH,WACnG,kBAACU,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAGA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,aAApB,qCAGA,kBAACC,EAAA,EAAD,CAAYC,KAAK,6BACf,kBAAC,IAAD,OAEF,kBAACD,EAAA,EAAD,CAAYC,KAAK,iDACf,kBAAC,IAAD,S,kECvCK,SAASC,IACtB,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,0BACb,kBAACM,EAAA,EAAD,CAAYC,QAAQ,MAApB,SAGA,6BACA,kBAACD,EAAA,EAAD,oDAEE,6BACA,6BAHF,4GAKE,6BACA,6BANF,8E,8BCCFK,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAAQ,CACNC,KAAK,YAGTC,WAAY,CACVC,WAAY,CACV,aAEFC,SAAS,MAqFEC,MA1Ef,WAEE,IAAMC,EAAYC,YAAcX,EAAMY,YAAYC,GAAG,OA8B/CzB,EA3BYN,aAAW,SAAAkB,GAAK,MAAK,CACrCc,OAAQ,CACNC,UAAW,QAEbC,SAAU,CACRtB,MAAO,GAETW,KAAM,CACJY,MAAO,UACPC,UAAW,QACXC,gBAAiB,WAGnBC,MAAO,CACLC,WAAY,IACZC,cAAe,SACfC,YAAa,GAEfC,QAAS,CACP9B,MAAOgB,EAAY,MAAQ,MAC3Be,SAAU,IACVC,SAAU,IACVC,OAAQ,WAKI9C,GAEhB,OACE,kBAAC+C,EAAA,EAAD,CAAe5B,MAAOA,GAEpB,kBAAC,IAAD,KACE,6BACE,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,WAAWzC,UAAWD,EAAQ0B,QAC7C,kBAACiB,EAAA,EAAD,CAAS1C,UAAWD,EAAQoC,SAC1B,kBAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBAAgBC,WAAW,YACjD,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,IAAD,CAAMC,GAAG,IAAIpB,MAAM,WACjB,kBAACtB,EAAA,EAAD,CAAYN,UAAWD,EAAQgC,OAA/B,YAKJ,kBAACY,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACE,EAAA,EAAD,CAAQxC,KAAMyC,IAAIC,OAAO,UAAzB,MACA,kBAAC,IAAD,CAAMH,GAAG,UAAS,kBAACC,EAAA,EAAD,oBAS5B,0BAAMjD,UAAWD,EAAQiB,MACvB,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAACxD,EAAD,SACvC,kBAAC,IAAD,CAAOuD,KAA+B,SAAUC,UAAW,kBAAM,kBAAC5C,EAAD,aCrFvD6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.c61044d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport portrait from \"./portrait.jpg\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport classnames from \"classnames\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n\r\nconst PORTRAIT_SIZE = \"250\";\r\n\r\nconst useStyles = makeStyles({\r\n  body: {\r\n    textAlign: \"center\",\r\n\r\n  },\r\n\r\n  portrait: {\r\n    borderRadius:\"50%\"\r\n  }\r\n\r\n});\r\n\r\n\r\n\r\n\r\nexport default function Home() {\r\n  const classes=useStyles();\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={classnames(\"App-container\", \"App-body\", classes.body)}>\r\n        <img src={portrait} alt=\"portrait\" height={PORTRAIT_SIZE} width={PORTRAIT_SIZE} className={classes.portrait}/>\r\n        <Typography variant=\"h4\">\r\n          David Xu\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">\r\n          Software Engineering Postgraduate\r\n        </Typography>\r\n        <IconButton href=\"https://github.com/dx8519\">\r\n          <GitHubIcon/>\r\n        </IconButton>\r\n        <IconButton href=\"https://www.linkedin.com/in/david-x-1b885868/\">\r\n          <LinkedInIcon/>\r\n        </IconButton>\r\n      </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nexport default function About() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-container App-body\">\r\n        <Typography variant=\"h3\">\r\n          About\r\n        </Typography>\r\n        <br />\r\n        <Typography>\r\n          Hey there, thanks for visiting my user page.\r\n          <br />\r\n          <br />\r\n          My name is David Xu and I'm a postgraduate software engineering student from The University of Melbourne.\r\n          <br />\r\n          <br />\r\n          Please feel free to view my CV for more information and contact details.\r\n        </Typography>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\nimport {HashRouter, Link, Route} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport {AppBar, Button, createMuiTheme, Toolbar, Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {ThemeProvider} from \"@material-ui/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport About from \"./About\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CV from \"./CV.pdf\";\n\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary:{\n      main:\"#282c34\"\n    },\n  },\n  typography: {\n    fontFamily: [\n      \"monospace\"\n    ],\n    fontSize:16\n\n\n  }\n});\n\n\n\n\n\n\nfunction App() {\n\n  const matchesMd = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n\n  const useStyles = makeStyles(theme => ({\n    appBar: {\n      boxShadow: \"none\",\n    },\n    homeLink: {\n      width: 0\n    },\n    main: {\n      color: \"#ffffff\",\n      minHeight: \"100vh\",\n      backgroundColor: \"#282c34\"\n    },\n\n    title: {\n      fontWeight: 700,\n      letterSpacing: \"0.06em\",\n      paddingLeft: 8,\n    },\n    toolBar: {\n      width: matchesMd ? \"50%\" : \"90%\",\n      minWidth: 300,\n      maxWidth: 540,\n      margin: \"auto\"\n    }\n\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n\n      <HashRouter>\n        <nav>\n          <AppBar position=\"absolute\" className={classes.appBar}>\n            <Toolbar className={classes.toolBar}>\n              <Grid container justify=\"space-between\" alignItems=\"baseline\">\n                <Grid item>\n                  <Link to=\"/\" color=\"inherit\" >\n                    <Typography className={classes.title}>\n                      DX8519\n                    </Typography>\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Button href={CV} target=\"_blank\">CV</Button>\n                  <Link to=\"/about\"><Button>About</Button></Link>\n                </Grid>\n              </Grid>\n\n\n\n            </Toolbar>\n          </AppBar>\n        </nav>\n        <main className={classes.main}>\n          <Route exact path=\"/\" component={() => <Home/>} />\n          <Route path={process.env.PUBLIC_URL + \"/about\"} component={() => <About/>} />\n        </main>\n\n\n\n      </HashRouter>\n    </ThemeProvider>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/portrait.9f13222e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CV.433b1da9.pdf\";"],"sourceRoot":""}